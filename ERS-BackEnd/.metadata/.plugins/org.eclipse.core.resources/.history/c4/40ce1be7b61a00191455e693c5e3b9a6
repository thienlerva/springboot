package com.revature.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.revature.beans.Reimbursement;
import com.revature.service.ReimbursementService;

@RestController
@RequestMapping("/ers")
@CrossOrigin("*")
public class ReimbursementController {
	
	@Autowired
	ReimbursementService service;
	
	@GetMapping("/all")
	public List<Reimbursement> getAllReimbursements() {
		return service.getAllReimbursements();
	}
	
	@GetMapping("/{id}") 
	public Optional<Reimbursement> getReimbursement(@PathVariable Integer id) {
		return service.getReimbursement(id);
	}
	
	@PostMapping("/create")
	public ResponseEntity<Reimbursement> createReimbursement(@RequestBody Reimbursement r) {
		r = service.createReimbursement(r);
		
		if(r==null) {
			return new ResponseEntity<Reimbursement>(HttpStatus.CONFLICT);
		} else {
			return new ResponseEntity<Reimbursement>(r, HttpStatus.CREATED);
		}
	}
	
	@PutMapping("/update")
	public ResponseEntity<Reimbursement> updateReimbursement(@RequestBody Reimbursement r) {
		r = service.updateReimbursement(r);
		
		if(r==null) {
			return new ResponseEntity<Reimbursement>(HttpStatus.CONFLICT);
		} else {
			return new ResponseEntity<Reimbursement>(r, HttpStatus.CREATED);
		}
	}
	
	@DeleteMapping("/delete/{id}")
	public boolean deleteReimbursement(@PathVariable Integer id) {
		service.deleteReimbursement(id);
		return true;
	}
	
	@PutMapping("/update-amount-description")
	@Transactional
	public ResponseEntity<Reimbursement> updateAmountDescription(@RequestBody Reimbursement reim) {
		reim = service.updateAmountDescription(reim);
		
		if(reim==null) {
			return new ResponseEntity<Reimbursement>(HttpStatus.CONFLICT);
		} else {
			return new ResponseEntity<Reimbursement>(reim, HttpStatus.CREATED);
		}
	}
	
	@GetMapping("/find-by-author-id/{id}")
	public List<Reimbursement> findByAuthorId(@PathVariable int id) {
		return service.findByAuthorId(id);
	}
}
